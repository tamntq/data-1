import streamlit as st
import pandas as pd
from google import genai
from google.genai.errors import APIError
import io
import docx # Th∆∞ vi·ªán ƒë·ªÉ ƒë·ªçc file .docx
import numpy as np

# --- C·∫•u h√¨nh Trang Streamlit ---
st.set_page_config(
    page_title="App Ph√¢n T√≠ch Ph∆∞∆°ng √Ån Kinh Doanh",
    layout="wide"
)

st.title("·ª®ng d·ª•ng Ph√¢n T√≠ch Ph∆∞∆°ng √Ån Kinh Doanh üìà")
st.caption("S·ª≠ d·ª•ng Gemini AI ƒë·ªÉ tr√≠ch xu·∫•t d·ªØ li·ªáu, x√¢y d·ª±ng d√≤ng ti·ªÅn v√† ƒë√°nh gi√° hi·ªáu qu·∫£ d·ª± √°n.")

# --- Kh·ªüi t·∫°o v√† C·∫•u h√¨nh API Key ---
try:
    API_KEY = st.secrets.get("GEMINI_API_KEY")
    if API_KEY is None:
        st.warning("Vui l√≤ng c·∫•u h√¨nh Kh√≥a 'GEMINI_API_KEY' trong Streamlit Secrets ƒë·ªÉ s·ª≠ d·ª•ng AI.")
        CLIENT = None
    else:
        CLIENT = genai.Client(api_key=API_KEY)
except KeyError:
    st.warning("Vui l√≤ng c·∫•u h√¨nh Kh√≥a 'GEMINI_API_KEY' trong Streamlit Secrets ƒë·ªÉ s·ª≠ d·ª•ng AI.")
    CLIENT = None
except Exception as e:
    st.error(f"L·ªói kh·ªüi t·∫°o Gemini Client: {e}")
    CLIENT = None

# --- H√†m ƒë·ªçc n·ªôi dung t·ª´ file Word (.docx) ---
def read_docx_file(uploaded_file):
    """ƒê·ªçc n·ªôi dung vƒÉn b·∫£n t·ª´ file .docx ƒë√£ t·∫£i l√™n."""
    document = docx.Document(uploaded_file)
    content = [p.text for p in document.paragraphs]
    return '\n'.join(content)

# --- H√†m l·ªçc th√¥ng tin d·ª± √°n b·∫±ng AI (Nhi·ªám v·ª• 1) ---
def extract_project_info(doc_content):
    """S·ª≠ d·ª•ng Gemini ƒë·ªÉ l·ªçc c√°c ch·ªâ s·ªë t√†i ch√≠nh t·ª´ n·ªôi dung vƒÉn b·∫£n."""
    if CLIENT is None:
        raise APIError("Gemini API Client ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o.")

    prompt = f"""
    B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch d·ª± √°n. Nhi·ªám v·ª• c·ªßa b·∫°n l√† tr√≠ch xu·∫•t 6 th√¥ng tin t√†i ch√≠nh sau t·ª´ vƒÉn b·∫£n Ph∆∞∆°ng √°n Kinh doanh:
    1. V·ªën ƒë·∫ßu t∆∞ ban ƒë·∫ßu (Initial Investment - I0)
    2. D√≤ng ƒë·ªùi d·ª± √°n (Project Life - N, ƒë∆°n v·ªã nƒÉm)
    3. Doanh thu thu·∫ßn h√†ng nƒÉm (Annual Revenue - R)
    4. Chi ph√≠ ho·∫°t ƒë·ªông h√†ng nƒÉm (Annual Operating Cost - C, kh√¥ng bao g·ªìm Kh·∫•u hao v√† L√£i vay)
    5. Chi ph√≠ s·ª≠ d·ª•ng v·ªën b√¨nh qu√¢n (WACC, ƒë∆°n v·ªã %)
    6. Thu·∫ø su·∫•t (Tax Rate - t, ƒë∆°n v·ªã %)
    
    H√£y tr·∫£ l·ªùi **CH·ªà DUY NH·∫§T** d∆∞·ªõi d·∫°ng m·ªôt chu·ªói JSON h·ª£p l·ªá, v·ªõi c√°c gi√° tr·ªã l√† s·ªë (ho·∫∑c s·ªë th·∫≠p ph√¢n, kh√¥ng c√≥ ƒë∆°n v·ªã ti·ªÅn t·ªá/nƒÉm/%):
    
    VƒÉn b·∫£n Ph∆∞∆°ng √°n Kinh doanh:
    ---
    {doc_content}
    ---
    
    C·∫•u tr√∫c JSON b·∫Øt bu·ªôc:
    {{
        "V·ªën ƒë·∫ßu t∆∞": <s·ªë>,
        "D√≤ng ƒë·ªùi d·ª± √°n": <s·ªë>,
        "Doanh thu": <s·ªë>,
        "Chi ph√≠": <s·ªë>,
        "WACC": <s·ªë>,
        "Thu·∫ø": <s·ªë>
    }}
    """
    
    response = CLIENT.models.generate_content(
        model='gemini-2.5-flash',
        contents=prompt
    )
    
    # X·ª≠ l√Ω chu·ªói JSON tr·∫£ v·ªÅ
    try:
        # T√¨m v√† tr√≠ch xu·∫•t chu·ªói JSON thu·∫ßn t√∫y
        import re
        json_match = re.search(r'\{.*\}', response.text, re.DOTALL)
        if json_match:
            json_string = json_match.group(0)
            import json
            data = json.loads(json_string)
            return data
        else:
            raise ValueError("Kh√¥ng t√¨m th·∫•y c·∫•u tr√∫c JSON h·ª£p l·ªá trong ph·∫£n h·ªìi c·ªßa AI.")
            
    except json.JSONDecodeError:
        raise APIError(f"Ph·∫£n h·ªìi c·ªßa AI kh√¥ng ph·∫£i l√† JSON h·ª£p l·ªá: {response.text}")

# --- H√†m t√≠nh to√°n ch·ªâ s·ªë v√† x√¢y d·ª±ng d√≤ng ti·ªÅn (Nhi·ªám v·ª• 2 & 3) ---
def calculate_project_metrics(data):
    """X√¢y d·ª±ng b·∫£ng d√≤ng ti·ªÅn v√† t√≠nh to√°n NPV, IRR, PP, DPP."""
    
    # 1. L·∫•y v√† Chu·∫©n h√≥a D·ªØ li·ªáu
    I0 = data.get("V·ªën ƒë·∫ßu t∆∞", 0)
    N = int(data.get("D√≤ng ƒë·ªùi d·ª± √°n", 0))
    R = data.get("Doanh thu", 0)
    C = data.get("Chi ph√≠", 0)
    WACC = data.get("WACC", 0) / 100.0
    t = data.get("Thu·∫ø", 0) / 100.0
    
    if N <= 0:
        raise ValueError("D√≤ng ƒë·ªùi d·ª± √°n ph·∫£i l·ªõn h∆°n 0.")
        
    # L·ª£i nhu·∫≠n tr∆∞·ªõc thu·∫ø v√† l√£i vay (EBIT)
    EBIT = R - C
    
    # L·ª£i nhu·∫≠n sau thu·∫ø (EAT)
    EAT = EBIT * (1 - t)
    
    # D√≤ng ti·ªÅn thu·∫ßn h√†ng nƒÉm (Net Cash Flow - NCF)
    # Gi·∫£ ƒë·ªãnh Kh·∫•u hao = 0 theo ph∆∞∆°ng √°n ƒë∆°n gi·∫£n h√≥a (ho·∫∑c ƒë√£ n·∫±m trong C)
    NCF_yearly = EAT # + Kh·∫•u hao
    
    # 2. X√¢y d·ª±ng B·∫£ng D√≤ng ti·ªÅn (Nhi·ªám v·ª• 2)
    periods = list(range(0, N + 1))
    
    # Kh·ªüi t·∫°o D√≤ng ti·ªÅn (Ch·ªâ c√≥ NCF ho·∫°t ƒë·ªông)
    cash_flows = [0] * (N + 1)
    cash_flows[0] = -I0  # NƒÉm 0: ƒê·∫ßu t∆∞ ban ƒë·∫ßu
    for i in range(1, N + 1):
        cash_flows[i] = NCF_yearly
        
    df_cashflow = pd.DataFrame({
        'NƒÉm': periods,
        'D√≤ng ti·ªÅn (CF)': cash_flows,
        'L·ª£i nhu·∫≠n sau thu·∫ø (EAT)': [0] + [EAT] * N,
        'WACC Chi·∫øt kh·∫•u (1/(1+WACC)^n)': [1] + [1 / ((1 + WACC)**n) for n in range(1, N + 1)]
    })
    
    # 3. T√≠nh to√°n c√°c Ch·ªâ s·ªë (Nhi·ªám v·ª• 3)
    
    # a. NPV (Net Present Value)
    npv_value = np.npv(WACC, cash_flows)
    
    # b. IRR (Internal Rate of Return)
    try:
        irr_value = np.irr(cash_flows)
    except Exception:
        irr_value = np.nan
        
    # c. PP (Payback Period - Th·ªùi gian ho√†n v·ªën)
    cumulative_cf = np.cumsum(cash_flows)
    pp_period = np.nan
    
    if (cumulative_cf > 0).any():
        payback_year_index = np.where(cumulative_cf > 0)[0][0]
        if payback_year_index > 0:
            # NƒÉm tr∆∞·ªõc khi ho√†n v·ªën
            prev_cum_cf = cumulative_cf[payback_year_index - 1]
            # Gi√° tr·ªã NCF nƒÉm ho√†n v·ªën
            ncft = cash_flows[payback_year_index]
            # Th·ªùi gian ho√†n v·ªën = NƒÉm tr∆∞·ªõc + Gi√° tr·ªã c√≤n thi·∫øu / NCF nƒÉm ƒë√≥
            pp_period = (payback_year_index - 1) + (-prev_cum_cf / ncft)
        elif payback_year_index == 0 and cash_flows[0] == 0 and cash_flows[1] > 0:
             pp_period = 0 # Ho√†n v·ªën ngay trong nƒÉm 0 (th·ª±c t·∫ø r·∫•t hi·∫øm)
    
    # d. DPP (Discounted Payback Period - Th·ªùi gian ho√†n v·ªën c√≥ chi·∫øt kh·∫•u)
    discounted_cf = [cf * (1 / ((1 + WACC)**n)) for n, cf in enumerate(cash_flows)]
    cumulative_dcf = np.cumsum(discounted_cf)
    dpp_period = np.nan
    
    if (cumulative_dcf > 0).any():
        dpayback_year_index = np.where(cumulative_dcf > 0)[0][0]
        if dpayback_year_index > 0:
            prev_cum_dcf = cumulative_dcf[dpayback_year_index - 1]
            dcft = discounted_cf[dpayback_year_index]
            dpp_period = (dpayback_year_index - 1) + (-prev_cum_dcf / dcft)
        elif dpayback_year_index == 0 and discounted_cf[0] == 0 and discounted_cf[1] > 0:
            dpp_period = 0

    metrics = {
        "NPV (T·ª∑ ƒë·ªìng)": npv_value,
        "IRR (%)": irr_value * 100,
        "PP (NƒÉm)": pp_period,
        "DPP (NƒÉm)": dpp_period,
        "WACC (% d√πng ƒë·ªÉ so s√°nh IRR)": WACC * 100,
        "D√≤ng ƒë·ªùi d·ª± √°n (NƒÉm)": N
    }
    
    return df_cashflow, metrics

# --- H√†m g·ªçi AI Ph√¢n t√≠ch Ch·ªâ s·ªë (Nhi·ªám v·ª• 4) ---
def analyze_metrics_with_ai(metrics, cashflow_table):
    """G·ª≠i c√°c ch·ªâ s·ªë ƒë√°nh gi√° v√† b·∫£ng d√≤ng ti·ªÅn ƒë·∫øn Gemini ƒë·ªÉ ph√¢n t√≠ch."""
    if CLIENT is None:
        return "L·ªói: Gemini API Client ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o ƒë·ªÉ ph√¢n t√≠ch."

    metrics_df = pd.DataFrame(list(metrics.items()), columns=['Ch·ªâ ti√™u', 'Gi√° tr·ªã'])
    
    prompt = f"""
    B·∫°n l√† m·ªôt chuy√™n gia th·∫©m ƒë·ªãnh d·ª± √°n t√†i ch√≠nh. D·ª±a tr√™n b·∫£ng d√≤ng ti·ªÅn v√† c√°c ch·ªâ s·ªë hi·ªáu qu·∫£ d·ª± √°n sau, h√£y ƒë∆∞a ra m·ªôt nh·∫≠n x√©t ph√¢n t√≠ch chuy√™n s√¢u v·ªÅ t√≠nh kh·∫£ thi c·ªßa d·ª± √°n.
    
    ƒê√°nh gi√° t·∫≠p trung v√†o:
    1. **Quy·∫øt ƒë·ªãnh Ch·∫•p thu·∫≠n/T·ª´ ch·ªëi** d·ª± √°n d·ª±a tr√™n NPV v√† so s√°nh IRR v·ªõi WACC.
    2. **Kh·∫£ nƒÉng sinh l·ªùi** (d·ª±a tr√™n NPV v√† IRR).
    3. **R·ªßi ro thanh kho·∫£n/Th·ªùi gian ho√†n v·ªën** (d·ª±a tr√™n PP v√† DPP).
    
    ---
    B·∫£ng D√≤ng ti·ªÅn (Cash Flow):
    {cashflow_table.to_markdown(index=False)}
    
    ---
    C√°c Ch·ªâ s·ªë Hi·ªáu qu·∫£ D·ª± √°n:
    {metrics_df.to_markdown(index=False)}
    
    ---
    
    Y√™u c·∫ßu: Vi·∫øt m·ªôt b√†i ph√¢n t√≠ch chuy√™n nghi·ªáp, ƒë·∫ßy ƒë·ªß v√† kh√°ch quan, b·∫±ng Ti·∫øng Vi·ªát.
    """
    
    response = CLIENT.models.generate_content(
        model='gemini-2.5-flash',
        contents=prompt
    )
    return response.text

# --- Kh·ªüi t·∫°o State v√† Logic Ch√≠nh ---
if "project_data" not in st.session_state:
    st.session_state.project_data = {}
if "cashflow_df" not in st.session_state:
    st.session_state.cashflow_df = None
if "metrics" not in st.session_state:
    st.session_state.metrics = None
if "doc_content" not in st.session_state:
    st.session_state.doc_content = ""

# ====================================================================
# --- HI·ªÇN TH·ªä V√Ä X·ª¨ L√ù D·ªÆ LI·ªÜU ---
# ====================================================================

uploaded_file = st.file_uploader(
    "1. T·∫£i file Word (.docx) ch·ª©a Ph∆∞∆°ng √°n Kinh doanh",
    type=['docx']
)

if uploaded_file is not None:
    try:
        # ƒê·ªçc n·ªôi dung file Word
        st.session_state.doc_content = read_docx_file(uploaded_file)
        st.info("ƒê√£ t·∫£i file Word th√†nh c√¥ng. S·∫µn s√†ng tr√≠ch xu·∫•t d·ªØ li·ªáu.")

        # Nhi·ªám v·ª• 1: L·ªçc d·ªØ li·ªáu
        if st.button("L·ªçc D·ªØ li·ªáu D·ª± √°n b·∫±ng AI ü§ñ"):
            if CLIENT is None:
                st.error("Kh√¥ng th·ªÉ th·ª±c hi·ªán t√°c v·ª• l·ªçc: Thi·∫øu Kh√≥a API Gemini.")
            else:
                with st.spinner('ƒêang g·ª≠i n·ªôi dung v√† ch·ªù AI tr√≠ch xu·∫•t th√¥ng tin...'):
                    project_data = extract_project_info(st.session_state.doc_content)
                    st.session_state.project_data = project_data
                    st.success("Tr√≠ch xu·∫•t d·ªØ li·ªáu th√†nh c√¥ng!")

        if st.session_state.project_data:
            st.subheader("2. D·ªØ li·ªáu D·ª± √°n ƒë√£ L·ªçc")
            data_df = pd.DataFrame(list(st.session_state.project_data.items()), columns=['Ch·ªâ ti√™u', 'Gi√° tr·ªã'])
            st.dataframe(data_df.style.format({'Gi√° tr·ªã': '{:,.2f}'}), use_container_width=True, hide_index=True)

            # Nhi·ªám v·ª• 2 & 3: X√¢y d·ª±ng d√≤ng ti·ªÅn v√† t√≠nh to√°n ch·ªâ s·ªë
            try:
                st.session_state.cashflow_df, st.session_state.metrics = calculate_project_metrics(st.session_state.project_data)

                # Hi·ªÉn th·ªã b·∫£ng d√≤ng ti·ªÅn
                st.subheader("3. B·∫£ng D√≤ng ti·ªÅn c·ªßa D·ª± √°n")
                st.dataframe(st.session_state.cashflow_df.style.format({
                    'D√≤ng ti·ªÅn (CF)': '{:,.0f}',
                    'L·ª£i nhu·∫≠n sau thu·∫ø (EAT)': '{:,.0f}',
                    'WACC Chi·∫øt kh·∫•u (1/(1+WACC)^n)': '{:.4f}'
                }), use_container_width=True, hide_index=True)

                # Hi·ªÉn th·ªã c√°c ch·ªâ s·ªë hi·ªáu qu·∫£
                st.subheader("4. C√°c Ch·ªâ s·ªë ƒê√°nh gi√° Hi·ªáu qu·∫£ D·ª± √°n")
                col_npv, col_irr, col_pp, col_dpp = st.columns(4)
                
                with col_npv:
                    st.metric(
                        "NPV (T·ª∑ ƒë·ªìng)", 
                        f"{st.session_state.metrics['NPV (T·ª∑ ƒë·ªìng)'] / 1000:,.2f} T·ª∑", 
                        delta=f"WACC: {st.session_state.metrics['WACC (% d√πng ƒë·ªÉ so s√°nh IRR)']:.2f}%"
                    )
                with col_irr:
                    st.metric(
                        "IRR (%)", 
                        f"{st.session_state.metrics['IRR (%)']:.2f}%" if not np.isnan(st.session_state.metrics['IRR (%)']) else "N/A",
                        delta_color="off"
                    )
                with col_pp:
                    st.metric("PP (Th·ªùi gian ho√†n v·ªën)", f"{st.session_state.metrics['PP (NƒÉm)']:.2f} NƒÉm" if not np.isnan(st.session_state.metrics['PP (NƒÉm)']) else "N/A")
                with col_dpp:
                    st.metric("DPP (Ho√†n v·ªën chi·∫øt kh·∫•u)", f"{st.session_state.metrics['DPP (NƒÉm)']:.2f} NƒÉm" if not np.isnan(st.session_state.metrics['DPP (NƒÉm)']) else "N/A")

                # Nhi·ªám v·ª• 5: Y√™u c·∫ßu AI ph√¢n t√≠ch (Nhi·ªám v·ª• 4)
                if st.button("Y√™u c·∫ßu AI Ph√¢n t√≠ch Ch·ªâ s·ªë üß†"):
                    if CLIENT is None:
                         st.error("Kh√¥ng th·ªÉ th·ª±c hi·ªán t√°c v·ª• ph√¢n t√≠ch: Thi·∫øu Kh√≥a API Gemini.")
                    else:
                        with st.spinner('ƒêang g·ª≠i ch·ªâ s·ªë v√† ch·ªù Gemini ph√¢n t√≠ch...'):
                            ai_analysis = analyze_metrics_with_ai(st.session_state.metrics, st.session_state.cashflow_df)
                            st.markdown("---")
                            st.subheader("5. K·∫øt qu·∫£ Ph√¢n t√≠ch t·ª´ Gemini AI")
                            st.info(ai_analysis)

            except ValueError as ve:
                st.error(f"L·ªói t√≠nh to√°n: {ve}")
            except Exception as e:
                st.error(f"L·ªói x·∫£y ra trong qu√° tr√¨nh t√≠nh to√°n ch·ªâ s·ªë: {e}")

    except Exception as e:
        st.error(f"L·ªói khi ƒë·ªçc file Word: {e}")

else:
    st.info("Vui l√≤ng t·∫£i l√™n file Word (.docx) ƒë·ªÉ b·∫Øt ƒë·∫ßu qu√° tr√¨nh ph√¢n t√≠ch Ph∆∞∆°ng √°n Kinh doanh.")
    
# ====================================================================
# --- CH·ª®C NƒÇNG B·ªî SUNG: KHUNG CHAT H·ªéI ƒê√ÅP V·ªöI GEMINI ---
# ====================================================================
st.markdown("---")
st.subheader("6. Chat v·ªõi AI Ph√¢n t√≠ch üí¨")
st.caption("Sau khi t·∫£i file v√† c√≥ d·ªØ li·ªáu, b·∫°n c√≥ th·ªÉ h·ªèi th√™m v·ªÅ c√°c ch·ªâ s·ªë ho·∫∑c d·ª± √°n.")

if CLIENT is None:
    st.error("Kh√¥ng th·ªÉ kh·ªüi t·∫°o Chatbot: Thi·∫øu Kh√≥a API 'GEMINI_API_KEY'.")
elif st.session_state.metrics is None:
    st.info("Vui l√≤ng ho√†n t·∫•t qu√° tr√¨nh t·∫£i file v√† t√≠nh to√°n ch·ªâ s·ªë tr∆∞·ªõc khi chat.")
else:
    try:
        model_name = 'gemini-2.5-flash'
        
        # T·∫°o d·ªØ li·ªáu t·ªïng h·ª£p ƒë·ªÉ l√†m ng·ªØ c·∫£nh cho Chatbot
        metrics_df_chat = pd.DataFrame(list(st.session_state.metrics.items()), columns=['Ch·ªâ ti√™u', 'Gi√° tr·ªã'])
        
        # System Instruction bu·ªôc Gemini tr·∫£ l·ªùi d·ª±a tr√™n d·ªØ li·ªáu ƒë√£ t·∫°o
        system_instruction = f"""
        B·∫°n l√† m·ªôt chuy√™n gia th·∫©m ƒë·ªãnh d·ª± √°n t√†i ch√≠nh, c√≥ kh·∫£ nƒÉng tr√≤ chuy·ªán. 
        M·ªçi c√¢u tr·∫£ l·ªùi c·ªßa b·∫°n ph·∫£i d·ª±a tr√™n **B·∫£ng d√≤ng ti·ªÅn** v√† **C√°c Ch·ªâ s·ªë Hi·ªáu qu·∫£ D·ª± √°n** sau. 
        H√£y tr·∫£ l·ªùi b·∫±ng Ti·∫øng Vi·ªát.
        
        D·ªÆ LI·ªÜU C∆† S·ªû ƒê·ªÇ PH√ÇN T√çCH:
        ---
        1. Ch·ªâ s·ªë Hi·ªáu qu·∫£:
        {metrics_df_chat.to_markdown(index=False)}
        
        2. D√≤ng ti·ªÅn:
        {st.session_state.cashflow_df.to_markdown(index=False)}
        
        ---
        """

        # Kh·ªüi t·∫°o chat session n·∫øu ch∆∞a c√≥
        if "project_chat_session" not in st.session_state:
            st.session_state.project_chat_session = CLIENT.chats.create(
                model=model_name,
                config=genai.types.GenerateContentConfig(
                    system_instruction=system_instruction
                )
            )
            st.session_state.chat_history = []
        
        # 1. Hi·ªÉn th·ªã l·ªãch s·ª≠ chat
        for message in st.session_state.chat_history:
            with st.chat_message(message["role"]):
                st.markdown(message["content"])

        # 2. X·ª≠ l√Ω Input t·ª´ ng∆∞·ªùi d√πng
        if user_prompt := st.chat_input("H·ªèi AI: 'D·ª± √°n c√≥ n√™n ƒë∆∞·ª£c ch·∫•p thu·∫≠n kh√¥ng?'"):
            
            # Th√™m tin nh·∫Øn ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠ v√† hi·ªÉn th·ªã
            st.session_state.chat_history.append({"role": "user", "content": user_prompt})
            with st.chat_message("user"):
                st.markdown(user_prompt)

            # G·ª≠i tin nh·∫Øn ƒë·∫øn m√¥ h√¨nh Gemini v√† hi·ªÉn th·ªã ph·∫£n h·ªìi streaming
            with st.spinner("ƒêang x·ª≠ l√Ω..."):
                try:
                    # G·ª≠i tin nh·∫Øn ƒë·∫øn phi√™n chat ƒë√£ kh·ªüi t·∫°o
                    response = st.session_state.project_chat_session.send_message(user_prompt, stream=True)
                    
                    full_response = ""
                    with st.chat_message("assistant"):
                        # D√πng st.write_stream ƒë·ªÉ hi·ªÉn th·ªã ph·∫£n h·ªìi d·∫ßn d·∫ßn
                        full_response = st.write_stream(response)
                    
                    # L∆∞u ph·∫£n h·ªìi ƒë·∫ßy ƒë·ªß v√†o l·ªãch s·ª≠ chat
                    st.session_state.chat_history.append({"role": "assistant", "content": full_response})
                    
                except APIError as e:
                    st.error(f"L·ªói g·ªçi Gemini API trong Chatbot: {e}")
                except Exception as e:
                    st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh trong Chatbot: {e}")

    except Exception as e:
        st.error(f"L·ªói kh·ªüi t·∫°o Chatbot: {e}")
